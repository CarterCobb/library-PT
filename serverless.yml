service: library-management-system

provider:
  name: aws
  region: us-west-1
  runtime: go1.x
  stage: v1
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:*
            - events:*
            - cloudwatch:*
          Resource: "*"

package:
  patterns:
    - "!./**"
    - "./build/**"

resources:
  Resources:
    books:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: books
        AttributeDefinitions:
          - AttributeName: isbn
            AttributeType: S
        KeySchema:
          - AttributeName: isbn
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    users:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: users
        AttributeDefinitions:
          - AttributeName: uid
            AttributeType: S
        KeySchema:
          - AttributeName: uid
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

functions:
  authorizer:
    name: ${sls:stage}-authorizer
    handler: build/authorizer
    environment:
      F_TYPE: authorizer
  book:
    name: ${sls:stage}-books
    handler: build/book
    environment:
      F_TYPE: book
    events:
      # Get book by isbn
      - http:
          path: /book/{isbn}
          method: GET
          cors: ${self:custom.cors}
      #  Get all books
      - http:
          path: /books
          method: GET
          cors: ${self:custom.cors}
      # Create a book
      - http:
          path: /book
          method: POST
          cors: ${self:custom.cors}
          authorizer: ${self:custom.authorizer.users}
      # Update a book
      - http:
          path: /book
          method: PATCH
          cors: ${self:custom.cors}
          authorizer: ${self:custom.authorizer.users}
      # Deletes a book by its isbn
      - http:
          path: /book/{isbn}
          method: DELETE
          cors: ${self:custom.cors}
          authorizer: ${self:custom.authorizer.users}
  user:
    name: ${sls:stage}-users
    handler: build/user
    environment:
      F_TYPE: user
    events:
      # Get user by uid
      - http:
          path: /user/{uid}
          method: GET
          cors: ${self:custom.cors}
      #  Get all users
      - http:
          path: /users
          method: GET
          cors: ${self:custom.cors}
          authorizer: ${self:custom.authorizer.users}
      # Create a user
      - http:
          path: /user
          method: POST
          cors: ${self:custom.cors}
      # login
      - http:
          path: /login
          method: POST
          cors: ${self:custom.cors}
      # Update a user
      - http:
          path: /user
          method: PATCH
          cors: ${self:custom.cors}
          authorizer: ${self:custom.authorizer.users}
      # Deletes a user by its uid
      - http:
          path: /user/{uid}
          method: DELETE
          cors: ${self:custom.cors}
          authorizer: ${self:custom.authorizer.users}
  book-actions:
    name: ${sls:stage}-book-actions
    handler: build/book_actions
    environment:
      F_TYPE: book-actions
    events:
      # Checkout a book by its isbn
      - http:
          path: /checkout/{isbn}
          method: POST
          cors: ${self:custom.cors}
          authorizer: ${self:custom.authorizer.users}
      # Return a previously checked out book by isbn
      - http:
          path: /return/{isbn}
          method: POST
          cors: ${self:custom.cors}
          authorizer: ${self:custom.authorizer.users}

custom:
  authorizer:
    users:
      name: authorizer
      type: TOKEN
      resultTtlInSeconds: 0
      identitySource: method.request.header.Authorization
      identityValidationExpression: Bearer (.*)
  cors:
    origin: "*"
    headers:
      - Content-Type
      - X-Amz-Date
      - Authorization
      - X-Api-Key
      - X-Amz-Security-Token
      - X-Amz-User-Agent
